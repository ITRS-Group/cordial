# DV2EMAIL Configuration

# By default the dv2email program will load dv2email.yaml in the working
# directory and from the user's "geneos" configuration directory, e.g.
# "${HOME}/.config/geneos/dv2email.yaml"
#
# In general the configuration in the working directory will contain
# templates and gateway connection information while the user
# configuration file, which can be protected with permissions 0400,
# should contain all authentication and email server information.

# âš  if you uncomment the default "gateway" without sub-keys, it
# overrides ALL gateway settings

gateway:
  # host and port indicate the gateway to connect to
  host: localhost
  port: 7038
  # if use-tls is true then only a secure connection will be used for the
  # REST command
  use-tls: true
  # allow-insecure permits connections where the server certificate cannot
  # be verified. It is not yet possible to supply a custom certificate
  # chain file or PEM.
  allow-insecure: false

  # Gateway Authentication
  #
  # `gateway` is the name of a Gateway configured with the `geneos`
  # program and whose credentials are stores using the `geneos login`
  # command. Is credentials are available then no username and password
  # need to be added to the dv2email configuration files.
  #
  # If credentials are not stored externally then a username and password
  # must be given. These are for a Geneos Gateway user that can be used
  # for REST commands. The password can be in `expandable` format as per
  # the output of `geneos aes password -e` or stored in a file or URL,
  # e.g. ${file:/path/to/protected/file} or ${https://example.com/secure}

  # name: GatewayName
  # username: readonly
  # password: geneos

# configure the email server details in your user dv2email YAML file -
# which should have "0600" permissions - which is then merged with the
# YAML file in the working directory. Your user YAML file is normally
# ${HOME}/.config/geneos/dv2email.yaml

# the username and password can be stored in `geneos` credentials, as
# above, for the mail server - e.g.
#
# geneos login smtp.gmail.com -u user-email
#

email:
  smtp: localhost
  port: 25
  use-tls: default
  # username: user-email
  # password: ${enc:~/.config/geneos/keyfile.aes:+encs+XXX}
  # from: from-email
  # to: destination-email
  subject: Geneos Alert

  # which attachments to include, default is text+html (multipart
  # alternate)
  #
  # plain text is always included as the main body. The html part(s) can
  # also be included as separate attachments for archiving or forwarding.
  # The formatting of text from template and/or tables is controlled in
  # the `attachments` section below. images are taken from the images
  # section
  #
  #   contents: [ text, text+html, html, xlsx, images ]
  #
  contents: [ text+html, images ]

  # split sets how to split matching dataviews over one or more emails.
  #
  # the default (any value except the two below) sends one email with
  # all the content, and the individual content type setting of `split`
  # will then influence how the attachments are split.
  #
  # `dataview` sends one email per dataview, sending as many emails as
  # required for all matching items. The content type `split` setting is
  # ignored.
  #
  # `entity` sends one email per set of dataviews in a single entity.
  # The content type `split` may control how the attachments are
  # structures per email.
  split: none # / dataview / entity

# types of file to write out with the export command
files: [ xlsx, html ]


# Data matching and filtering

# The order of the columns cannot be guaranteed in the Gateway snapshot
# output, nor is the name of the first column (the 'rowName') given. Use
# this section to match (using shell globbing rules and not regular
# expressions) the name of the dataview to select the columns to output
# and in which order. The first column is always set to the environment
# variable `_FIRSTCOLUMN` or it defaults to the literal string
# `rowname`. Note that if an environment variable '__COLUMNS' (case
# sensitive name, comma separated values) is passed to the program
# that will override these settings.
#
# `_FIRSTCOLUMN` is only set by the Gateway for Actions or Alerts on
# table cells and will not be set for headline cells or rules on non
# cell data items.
#
# The dataview name is tested against all the keys in longest to
# shortest order and the first match wins.
#
# Apart from the first column (see above) you can use further patterns
# to match multiple columns and any columns not listed are excluded from
# the output
column-filter:
  # 'dvname*': [ list, of, columns ]
  # toolkit: [ passwd, uid, gid, gcos, homedir, shell ]
  # '*disk': [ percentageUsed, freeSpace ]
  # '*': [ unknown ]

first-column:
  # dvname*: something
  # toolkit: username
  '*': rowname

# column-order:
  # '*': ascending

# similar to the above, these settings let you filter rows from being
# used. Each string is matched against the rowname (first column) and if
# the rowname does not match any of the patterns it will be dropped from
# the email. You cannot change the order of the rows.
row-filter:
  # '*': [ sys*, root ]

row-order:
  # toolkit: username+

# similar to the above, these settings let you filter headlines from
# being included in the email. No ordering is possible.
headline-filter:
  # '*': samp*

# embed these images and give them the (short) name on the left these
# can then be referenced in the HTML as <img href="cid:logo.png"/> etc.
images:
  # logo.png: ./cmd/icon_OurSolutions-geneos-image.png

# settings for the different attachment types. The choice of attachments
# to send is in the `email` section above.
#
# For value expansion the following items are available:
#
# * `gateway`
# * `probe`
# * `entity`
# * `sampler`
# * `type`
# * `dataview`
#
# * `date`
# * `time`
# * `datetime`
# * `serial` - offset in list, from 1. digits increase for each order of magnitude of dataviews
#

text:
  # content-type: text/plain  # from template and/or tables
  # filename: auto # dataviews-${date}${time}.txt
  template: ${config:text-template}
  # split text attachments or files (not the main body text)
  split: single # / dataview / entity

texttable:
  filename: auto
  split: single

html:
  # content-type: text/html # from template - single or per-dataview
  filename: auto # dataviews-${date}${time}.html
  template: ${config:html-template}
  # split HTML attachements or files (not the MIME multipart/alternative)
  split: single # / dataview / entity

xlsx:
  # content-type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
  filename: auto #  dataviews-${date}${time}.xlsx
  sheetname: auto
  # sheetname: ${serial}-${entity}-${sampler}-${dataview} # truncated to 31 chars
  # split XLSX attachments or files
  split: single # / dataview / entity

  style: TableStyleMedium2 # standard but also from https://xuri.me/excelize/en/utils.html#AddTable
  row-stripes: true
  column-stripes: false
  password: ""
  column-width: 20.0

# Templates
#
# Templates are passed the following data structure:
#
# type dv2emailData struct {
#  Dataviews []*commands.Dataview
#  Env       map[string]string
# }

# These fields have the following meaning:
#
# * Dataviews is a slice of any dataview data
# * Env is a map of all the environment variables in the processes view.
#   This will normally contain all the Geneos defined values for an
#   Action or Alert/Effect.
#

# The text-template is used to build the text/plain part of the email.
# Most modern email clients will never display this. It should still be
# set to something descriptive for accessibility and assistive readers.
#
# The text-template is, as to be expected, rendered with text/template.
#
text-template: |
  This email has been generated by the ITRS Geneos system using the
  dv2email program. If you did not expect to received this email then
  please contact the sender.

  Environment Variables:
  {{range $key, $value := .Env}}
  * {{$key}}={{$value -}}
  {{end}}

# The html-template is the main workhorse of the dv2email program. The
# default template below uses a simple layout for dataview and applies
# minimal CSS styling. It supports the features above for row-ordering
# using Rows.
#
# The html-template is rendered using html/template.
#
# Because most email clients do not support complex CSS the output is
# "inlined" to include the applicable CSS style on each element as
# required. Do not mix a stylesheet in the <head> with styles on tags.
#
html-template: |
  <html>
  <head>
    <style>
      .CRITICAL {
        background-color: crimson;
        color: white;
      }

      .WARNING {
        background-color: gold;
        color: black;
      }

      .OK {
        background-color: limegreen;
        color: white;
      }

      .UNDEFINED {
        background-color: lightgrey;
        color: black;
      }

      table, th, td {
        table-layout: fixed;
        font-family: Lucida Console, monospace;
        border: 1px solid black;
        border-collapse: collapse;
        padding: 5px;
        text-align: left;
        vertical-align: top;
      }

      td {
        word-wrap: break-word;
      }

      .envname {
        width: 25%;
      }

      dt {
        font-weight: bold;
      }

      .dataview {
        /* border: 1px solid black; */
        padding: 5px;
      }

      .headlines {
        border: 1px solid white;
      }

      .rows {
        font-size: 0.8em;
      }

      .target {
        border: 3px solid blue;
      }
    </style>
  </head>
  <body>
    <a href="https://www.itrsgroup.com/products/geneos"><img src="cid:logo.png"/></a>

    <h1>ITRS Geneos DV2EMAIL Default Template</h1>

    <p>This content has been generated by the default template built
    into the dv2email program from the ITRS <a
    href="https://github.com/ITRS-Group/cordial">cordial</a> tool set.
    It is normally only seen when testing. If you did not expect to
    receive this please contact the sender and let them know.</p>

    <h2>Dataviews</h2>

    <p>These Dataviews matched the input <b>_VARIABLEPATH</b>:
    <code>{{.Env._VARIABLEPATH}}</code></p>

    <p></p>

    {{range $index, $dataview := .Dataviews}}

    <table class="dataview">
      <tbody>
        <tr><th>Dataview</th><td>{{.Name}}</td></tr>
        <tr><th>XPath</th><td>{{.XPath}}</td></tr>
        <tr><th>Last Sample</th><td>{{.SampleTime}}</td></tr>
        <tr>
          <th>Headlines</th>
          <td>
            <table class="headlines">
              <tbody>
                {{range $headline, $values := .Headlines}}<tr>
                  <th class="headlines">{{$headline}}</th>
                  <td class="headlines {{.Severity}} {{if and (eq $.Env._HEADLINE $headline)}} target{{end}}">{{$values.Value}}</td>
                </tr>
                {{end}}
              </tbody>
            </table>
          </td>
        </tr>
        <tr>
          <th>Rows</th>
          <td>
            <table class="rows">
              <thead>
                {{range .ColumnOrder}}<th>{{.}}</th>{{end}}
              </thead>
              <tbody>
                {{range $row := .RowOrder}}
                <tr>
                  <th>{{$row}}</th>
                  {{range $i, $column := $dataview.ColumnOrder}}
                      {{if ne $i 0}}
                        {{with (index $dataview.Table $row $column)}}
                          <td class="cells {{.Severity}}{{if and (eq $.Env._ROWNAME $row) (eq $.Env._COLUMN $column)}} target{{end}}">{{.Value}}</td>
                        {{end}}
                      {{end}}
                  {{end}}
                </tr>
                {{end}}
              </tbody>
            </table>
          </td>
        </tr>
      </tbody>
    </table>

    <hr>

    {{end}}

    <h2>Environment Variables</h2>
    <table style="width: 100%;">
      <thead>
        <th class="envname">Name</th>
        <th>Value</th>
      </thead>
      <tbody>
        {{range $key, $value := .Env}}<tr>
          <th class="envname">{{$key}}</th>
          <td style="word-wrap: break-word;">{{$value}}</td>
        </tr>{{end}}
      </tbody>
    </table>
  </body>
  </html>
